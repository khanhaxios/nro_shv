package com.girlkun.services.func;

import java.util.HashMap;
import java.util.Map;

import com.girlkun.models.item.Item;
import com.girlkun.consts.ConstNpc;
import com.girlkun.consts.ConstPlayer;
import com.girlkun.jdbc.daos.GodGK;
import com.girlkun.jdbc.daos.PlayerDAO;
import com.girlkun.models.item.Item.ItemOption;
import com.girlkun.models.map.Zone;
import com.girlkun.services.NpcService;
import com.girlkun.models.player.Inventory;
import com.girlkun.models.player.Player;
import com.girlkun.services.Service;
import com.girlkun.utils.Util;
import com.girlkun.network.io.Message;
import com.girlkun.server.Client;
import com.girlkun.services.ItemService;
import com.girlkun.services.PlayerService;
import com.girlkun.services.InventoryServiceNew;
import com.girlkun.utils.Logger;

import java.util.List;

/**
 * @author üíñ Tr·∫ßn L·∫°i üíñ
 * @copyright üíñ GirlkuN üíñ
 */
public class SummonDragon {

    public static final byte WISHED = 0;
    public static final byte TIME_UP = 1;

    public static final byte TRY = 0;
    public static final byte FIGHT = 1;

    public static final byte MASTER0 = 0;
    public static final byte MASTER1 = 1;

    public static final byte DRAGON_SHENRON = 0;
    public static final byte DRAGON_PORUNGA = 1;
    public static final byte DRAGON_PORUNGA1 = 2;

    public static final short NGOC_RONG_1_SAO = 14;
    public static final short NGOC_RONG_2_SAO = 15;
    public static final short NGOC_RONG_3_SAO = 16;
    public static final short NGOC_RONG_4_SAO = 17;
    public static final short NGOC_RONG_5_SAO = 18;
    public static final short NGOC_RONG_6_SAO = 19;
    public static final short NGOC_RONG_7_SAO = 20;


    public static final short NGOC_RONGTRB1 = 1814;
    public static final short NGOC_RONGTRB2 = 1815;
    public static final short NGOC_RONGTRB3 = 1816;
    public static final short NGOC_RONGTRB4 = 1817;
    public static final short NGOC_RONGTRB5 = 1818;
    public static final short NGOC_RONGTRB6 = 1819;
    public static final short NGOC_RONGTRB7 = 1820;


    public static final short NGOC_RONGTRB11 = 1821;
    public static final short NGOC_RONGTRB22 = 1822;
    public static final short NGOC_RONGTRB33 = 1823;
    public static final short NGOC_RONGTRB44 = 1824;
    public static final short NGOC_RONGTRB55 = 1825;
    public static final short NGOC_RONGTRB66 = 1826;
    public static final short NGOC_RONGTRB77 = 1827;

    public static final String SUMMON_SHENRON_TUTORIAL
            = "C√≥ 3 c√°ch g·ªçi r·ªìng th·∫ßn. G·ªçi t·ª´ ng·ªçc 1 sao, g·ªçi t·ª´ ng·ªçc 2 sao, ho·∫∑c g·ªçi t·ª´ ng·ªçc 3 sao\n"
            + "C√°c ng·ªçc 4 sao ƒë·∫øn 7 sao kh√¥ng th·ªÉ g·ªçi r·ªìng th·∫ßn ƒë∆∞·ª£c\n"
            + "ƒê·ªÉ g·ªçi r·ªìng 1 sao c·∫ßn ng·ªçc t·ª´ 1 sao ƒë·∫øn 7 sao\n"
            + "ƒê·ªÉ g·ªçi r·ªìng 2 sao c·∫ßn ng·ªçc t·ª´ 2 sao ƒë·∫øn 7 sao\n"
            + "ƒê·ªÉ g·ªçi r·ªìng 3 sao c·∫ßn ng·ªçc t·ª´ 3 sao ƒë·∫øn 7sao\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 3 sao: Capsule 3 sao, ho·∫∑c 2 tri·ªáu s·ª©c m·∫°nh, ho·∫∑c 200k v√†ng\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 2 sao: Capsule 2 sao, ho·∫∑c 20 tri·ªáu s·ª©c m·∫°nh, ho·∫∑c 2 tri·ªáu v√†ng\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 1 sao: Capsule 1 sao, ho·∫∑c 200 tri·ªáu s·ª©c m·∫°nh, ho·∫∑c 20 tri·ªáu v√†ng, ho·∫∑c ƒë·∫πp trai, ho·∫∑c....\n"
            + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
            + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";
    public static final String SHENRON_SAY
            = "Ta s·∫Ω ban cho ng∆∞·ªùi 1 ƒëi·ªÅu ∆∞·ªõc, ng∆∞∆°i c√≥ 5 ph√∫t, h√£y suy nghƒ© th·∫≠t k·ªπ tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh";

    public static final String[] SHENRON_1_STAR_WISHES_1
            = new String[]{"Gi√†u c√≥\n+2000 Kim \nT·ªá", "GƒÉng tay\nƒëang mang\nl√™n 1 c·∫•p", "Ch√≠ m·∫°ng\nG·ªëc +2%",
            "Thay\nChi√™u 2-3\nƒê·ªá t·ª≠", "Thay\nChi√™u 3-4\nƒê·ªá t·ª≠", "Nh·∫≠n Skill\nLi√™n Ho√†n\nCho ƒê·ªá", "ƒêi·ªÅu ∆∞·ªõc\nkh√°c"};
    public static final String[] SHENRON_1_STAR_WISHES_2
            = new String[]{"ƒê·∫πp trai\nnh·∫•t\nV≈© tr·ª•", "Gi√†u c√≥\n+100\nH·ªìng Ng·ªçc", "+500 t·∫•t \nc·∫£ ch·ªâ \ns·ªë g·ªëc",
            "GƒÉng tay ƒë·ªá\nƒëang mang\nl√™n 1 c·∫•p", "Thay\nChi√™u 4-5\nƒê·ªá t·ª≠",
            "ƒêi·ªÅu ∆∞·ªõc\nkh√°c"};
    public static final String[] SHENRON_2_STARS_WHISHES
            = new String[]{"Gi√†u c√≥\n+100 \nTh·ªèi kim t·ªá", "+200 T·∫•t \nc·∫£ ch·ªâ \ns·ªë g·ªëc", "20000 c√¥ng ƒë·ª©c"};
    public static final String[] SHENRON_3_STARS_WHISHES
            = new String[]{"Gi√†u c√≥\n+ 50\nTh·ªèi kim t·ªá", "+50 \nT·∫•t c·∫£\nch·ªâ s·ªë g·ªëc", "5000 \nC√¥ng ƒë·ª©c"};
    public static final String[] SHENRON_1_STAR_TRB
            = new String[]{"Thay\nChi√™u 2,3,4\nƒê·ªá t·ª≠", "Ch√¢n thi√™n t·ª≠\nC√≥ th·ªÉ\nvƒ©nh vi·ªÖn",
            "EXP\nX2 TNSM", "H·ªôp qu√†\nbay"};
    public static final String SUMMON_SHENRON_TRB

            = "ƒê·ªÉ g·ªçi r·ªìng c·∫ßn ng·ªçc si√™u c·∫•p 1 sao\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 1 sao: ƒê·ªïi skil 234 ƒë·ªá , Ch√¢n thi√™n t·ª≠ ƒë·∫∑c bi·ªát c√≥ th·ªÉ vƒ©nh vi·ªÖn,EXP 10 ph√∫t, H·ªôp qu√† bay\n"
            + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
            + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";
    public static final String[] SHENRON_1_STAR_TRB1
            = new String[]{"Thay\nChi√™u 2,3,4\nƒê·ªá t·ª≠", "Ch√¢n thi√™n t·ª≠\nC√≥ th·ªÉ\nvƒ©nh vi·ªÖn",
            "EXP\nX2 TNSM", "H·ªôp qu√†\nbay"};
    public static final String SUMMON_SHENRON_TRB1

            = "ƒê·ªÉ g·ªçi r·ªìng c·∫ßn ng·ªçc bƒÉng 1 sao\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 1 sao: ƒê·ªïi skil 234 ƒë·ªá , Ch√¢n thi√™n t·ª≠ ƒë·∫∑c bi·ªát c√≥ th·ªÉ vƒ©nh vi·ªÖn,EXP 10 ph√∫t, H·ªôp qu√† bay\n"
            + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
            + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";

    //--------------------------------------------------------------------------
    private static SummonDragon instance;
    private final Map pl_dragonStar;
    private long lastTimeShenronAppeared;
    private long lastTimeShenronWait;
    //    private final int timeResummonShenron = 0;
    private boolean isShenronAppear;
    private final int timeShenronWait = 300000;

    private final Thread update;
    private boolean active;
    private long lastTimetrbAppeared;
    private long lastTimetrbWait;

    private long lastTimetrb1Appeared;
    private long lastTimetrb1Wait;

    public boolean isPlayerDisconnect;
    public Player playerSummonShenron;
    private int playerSummonShenronId;
    private Zone mapShenronAppear;
    private byte shenronStar;
    private int menuShenron;
    private byte select;

    private SummonDragon() {
        this.pl_dragonStar = new HashMap<>();
        this.update = new Thread(() -> {
            while (active) {
                try {
                    if (isShenronAppear) {
                        if (isPlayerDisconnect) {

                            List<Player> players = mapShenronAppear.getPlayers();
                            for (Player plMap : players) {
                                if (plMap.id == playerSummonShenronId) {
                                    playerSummonShenron = plMap;
                                    reSummonShenron();
                                    isPlayerDisconnect = false;
                                    break;
                                }
                            }

                        }
                        if (Util.canDoWithTime(lastTimeShenronWait, timeShenronWait)) {
                            shenronLeave(playerSummonShenron, TIME_UP);
                        }
                    }
                    Thread.sleep(1000);
                } catch (Exception e) {
                    Logger.logException(SummonDragon.class, e);
                }
            }
        });
        this.active();
    }

    private void active() {
        if (!active) {
            active = true;
            this.update.start();
        }
    }

    public void summonNamec(Player pl) {
        if (pl.zone.map.mapId == 7) {
            playerSummonShenron = pl;
            playerSummonShenronId = (int) pl.id;
            mapShenronAppear = pl.zone;
            sendNotifyShenronAppear();
            activeShenron(pl, true, SummonDragon.DRAGON_PORUNGA);
            sendWhishesNamec(pl);
        } else {
            Service.getInstance().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
        }
    }

    public static SummonDragon gI() {
        if (instance == null) {
            instance = new SummonDragon();
        }
        return instance;
    }

    public void openMenuSummonShenron(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRON, -1, "B·∫°n mu·ªën g·ªçi r·ªìng th·∫ßn ?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void summonShenron(Player pl) {
        if (pl.zone.map.mapId == 0 || pl.zone.map.mapId == 7 || pl.zone.map.mapId == 14 || pl.zone.map.mapId == 182) {
            if (checkShenronBall(pl)) {
                if (isShenronAppear) {
                    Service.getInstance().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                int timeResummonShenron = 300000;
                if (Util.canDoWithTime(lastTimeShenronAppeared, timeResummonShenron)) {
                    //g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    playerSummonShenronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    byte dragonStar = (byte) pl_dragonStar.get(playerSummonShenron);
                    int begin = NGOC_RONG_1_SAO;
                    switch (dragonStar) {
                        case 2:
                            begin = NGOC_RONG_2_SAO;
                            break;
                        case 3:
                            begin = NGOC_RONG_3_SAO;
                            break;
                    }
                    for (int i = begin; i <= NGOC_RONG_7_SAO; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl, InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_SHENRON);
                    sendWhishesShenron(pl);
                } else {
                    int timeLeft = (int) ((timeResummonShenron - (System.currentTimeMillis() - lastTimeShenronAppeared)) / 1000);
                    Service.getInstance().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i " + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.getInstance().sendThongBao(pl, "Ch·ªâ ƒë∆∞·ª£c g·ªçi r·ªìng th·∫ßn ·ªü ng√¥i l√†ng tr∆∞·ªõc nh√†");
        }
    }

    public void openMenuSummonShenronTRB(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRONTRB, -1, "B·∫°n mu·ªën g·ªçi r·ªìng th·∫ßn si√™u c·∫•p?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void openMenuSummonShenronTRB1(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRONTRB1, -1, "B·∫°n mu·ªën g·ªçi r·ªìng th·∫ßn bƒÉng?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void summonShenronTRB(Player pl) {
        if (pl.zone.map.mapId > 0) {
            if (checkShenronBalltrb(pl)) {
                if (isShenronAppear) {
                    Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                int timeResummontrb = 600000;
                if (Util.canDoWithTime(lastTimetrbAppeared, timeResummontrb)) {
                    //g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    int playertrbnronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    int begin = NGOC_RONGTRB1;

                    for (int i = begin; i <= NGOC_RONGTRB7; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl, InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_PORUNGA);
                    sendWhishesShenrontrb(pl);
                } else {
                    int timeLeft = (int) ((timeResummontrb - (System.currentTimeMillis() - lastTimetrbAppeared)) / 1000);
                    Service.gI().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i " + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.gI().sendThongBao(pl, "Kh√¥ng g·ªçi r·ªìng si√™u c·∫•p ·ªü tr∆∞·ªõc l√†ng nh√©!!");
        }
    }

    public void summonShenronTRB1(Player pl) {
        if (pl.zone.map.mapId > 0) {
            if (checkShenronBalltrb1(pl)) {
                if (isShenronAppear) {
                    Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                int timeResummontrb1 = 600000;
                if (Util.canDoWithTime(lastTimetrb1Appeared, timeResummontrb1)) {
                    //g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    int playertrb1nronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    int begin = NGOC_RONGTRB11;

                    for (int i = begin; i <= NGOC_RONGTRB77; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl, InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_PORUNGA1);
                    sendWhishesShenrontrb1(pl);
                } else {
                    int timeLeft = (int) ((timeResummontrb1 - (System.currentTimeMillis() - lastTimetrb1Appeared)) / 1000);
                    Service.gI().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i " + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.gI().sendThongBao(pl, "Kh√¥ng g·ªçi r·ªìng bƒÉng ·ªü tr∆∞·ªõc l√†ng nh√©!!");
        }
    }

    private void sendWhishesShenrontrb(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB, SHENRON_SAY, SHENRON_1_STAR_TRB);
                break;
            case 2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB, SHENRON_SAY, SHENRON_1_STAR_TRB);
                break;
            case 3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB, SHENRON_SAY, SHENRON_1_STAR_TRB);
                break;
        }
    }

    private void sendWhishesShenrontrb1(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB1, SHENRON_SAY, SHENRON_1_STAR_TRB1);
                break;
            case 2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB1, SHENRON_SAY, SHENRON_1_STAR_TRB1);
                break;
            case 3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB1, SHENRON_SAY, SHENRON_1_STAR_TRB1);
                break;
        }
    }

    private boolean checkShenronBalltrb(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        if (dragonStar == 1) {
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB2)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng si√™u c·∫•p 2 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB3)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng si√™u c·∫•p 3 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB4)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng si√™u c·∫•p 4 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB5)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng si√™u c·∫•p 5 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB6)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng si√™u c·∫•p 6 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB7)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng si√™u c·∫•p 7 sao");
                return false;
            }
        }
        return true;
    }

    private boolean checkShenronBalltrb1(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        if (dragonStar == 2) {
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB22)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng bƒÉng 2 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB33)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng bƒÉng 3 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB44)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng bƒÉng 4 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB55)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng bƒÉng 5 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB66)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng bƒÉng 6 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONGTRB77)) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng bƒÉng 7 sao");
                return false;
            }
        }
        return true;
    }

    private void reSummonShenron() {
        activeShenron(playerSummonShenron, true, SummonDragon.DRAGON_SHENRON);
        sendWhishesShenron(playerSummonShenron);
    }

    private void sendWhishesShenron(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_1_1, SHENRON_SAY, SHENRON_1_STAR_WISHES_1);
                break;
            case 2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_2, SHENRON_SAY, SHENRON_2_STARS_WHISHES);
                break;
            case 3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_3, SHENRON_SAY, SHENRON_3_STARS_WHISHES);
                break;
        }
    }

    private void sendWhishesNamec(Player pl) {
        NpcService.gI().createMenuRongThieng(pl, ConstNpc.NAMEC_1, "Ta s·∫Ω ban cho c·∫£ bang ng∆∞∆°i 1 ƒëi·ªÅu ∆∞·ªõc, ng∆∞∆°i c√≥ 5 ph√∫t, h√£y suy nghƒ© th·∫≠t k·ªπ tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh", "x99 ng·ªçc r·ªìng 3 sao");
    }

    public void activeShenron(Player pl, boolean appear, byte type) {
        Message msg;
        try {
            msg = new Message(-83);
            msg.writer().writeByte(appear ? 0 : (byte) 1);
            if (appear) {
                msg.writer().writeShort(pl.zone.map.mapId);
                msg.writer().writeShort(pl.zone.map.bgId);
                msg.writer().writeByte(pl.zone.zoneId);
                msg.writer().writeInt((int) pl.id);
                msg.writer().writeUTF("");
                msg.writer().writeShort(pl.location.x);
                msg.writer().writeShort(pl.location.y);
                msg.writer().writeByte(type);
                lastTimeShenronWait = System.currentTimeMillis();
                isShenronAppear = true;
            }
            Service.getInstance().sendMessAllPlayer(msg);
        } catch (Exception e) {
        }
    }

    public void activeNight(Player pl) {
        Message msg;
        try {
            msg = new Message(-83);
            msg.writer().writeByte(0);

            msg.writer().writeShort(180);
            msg.writer().writeShort(11);
            msg.writer().writeByte(0);
            msg.writer().writeInt((int) -1);
            msg.writer().writeUTF("");
            msg.writer().writeShort(-1);
            msg.writer().writeShort(-1);
            msg.writer().writeByte(-1);
            //   lastTimeShenronWait = System.currentTimeMillis();
            //   isShenronAppear = true;

            Service.gI().sendMessAllPlayerInMap(pl, msg);
        } catch (Exception e) {
        }
    }

    public void activeDay(Player pl) {
        Message msg;
        try {
            msg = new Message(-83);
            msg.writer().writeByte(1);

            msg.writer().writeShort(180);
            msg.writer().writeShort(pl.zone.map.bgId);
            msg.writer().writeByte(0);
            msg.writer().writeInt((int) -1);
            msg.writer().writeUTF("");
            msg.writer().writeShort(-1);
            msg.writer().writeShort(-1);
            msg.writer().writeByte(-1);
            //   lastTimeShenronWait = System.currentTimeMillis();
            //   isShenronAppear = true;

            Service.gI().sendMessAllPlayerInMap(pl, msg);
        } catch (Exception e) {
        }
    }

    public void changeToNight(Player pl, boolean appear, byte type) {
        Message msg;
        try {
            msg = new Message(-83);
            msg.writer().writeByte(0);
            if (appear) {
                msg.writer().writeShort(175);
                msg.writer().writeShort(pl.zone.map.bgId);
                msg.writer().writeByte(0);
                msg.writer().writeInt((int) pl.id);
                msg.writer().writeUTF("");
                msg.writer().writeShort(pl.location.x);
                msg.writer().writeShort(pl.location.y);
                msg.writer().writeByte(type);

            }
            Service.getInstance().sendMessAllPlayer(msg);
        } catch (Exception e) {
        }
    }

    private boolean checkShenronBall(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        if (dragonStar == 1) {
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_2_SAO)) {
                Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 2 sao");
                return false;
            }
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_3_SAO)) {
                Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        } else if (dragonStar == 2) {
            if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_3_SAO)) {
                Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        }
        if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_4_SAO)) {
            Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 4 sao");
            return false;
        }
        if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_5_SAO)) {
            Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 5 sao");
            return false;
        }
        if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_6_SAO)) {
            Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 6 sao");
            return false;
        }
        if (!InventoryServiceNew.gI().isExistItemBag(pl, NGOC_RONG_7_SAO)) {
            Service.getInstance().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 7 sao");
            return false;
        }
        return true;
    }

    private void sendNotifyShenronAppear() {
        Message msg;
        try {
            msg = new Message(-25);
            msg.writer().writeUTF(playerSummonShenron.name + " v·ª´a g·ªçi r·ªìng th·∫ßn t·∫°i "
                    + playerSummonShenron.zone.map.mapName + " khu v·ª±c " + playerSummonShenron.zone.zoneId);
            Service.getInstance().sendMessAllPlayerIgnoreMe(playerSummonShenron, msg);
            msg.cleanup();
        } catch (Exception e) {
        }
    }

    public void confirmWish() {
        switch (this.menuShenron) {
            case ConstNpc.SHENRON_1_1:
                switch (this.select) {
                    case 0: //20 tr v√†ng
                        Item item_v = ItemService.gI().createNewItem((short) 457, 2000);
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, item_v);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 1: //gƒÉng tay ƒëang ƒëeo l√™n 1 c·∫•p
                        Item item = this.playerSummonShenron.inventory.itemsBody.get(2);
                        if (item.isNotNullItem()) {
                            int level = 0;
                            for (ItemOption io : item.itemOptions) {
                                if (io.optionTemplate.id == 72) {
                                    level = io.param;
                                    if (level < 7) {
                                        io.param++;
                                    }
                                    break;
                                }
                            }
                            if (level < 7) {
                                if (level == 0) {
                                    item.itemOptions.add(new ItemOption(72, 1));
                                }
                                for (ItemOption io : item.itemOptions) {
                                    if (io.optionTemplate.id == 0) {
                                        io.param += (io.param * 10 / 100);
                                        break;
                                    }
                                }
                                InventoryServiceNew.gI().sendItemBody(playerSummonShenron);
                            } else {
                                Service.getInstance().sendThongBao(playerSummonShenron, "GƒÉng tay c·ªßa ng∆∞∆°i ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "Ng∆∞∆°i hi·ªán t·∫°i c√≥ ƒëeo gƒÉng ƒë√¢u");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 2: //ch√≠ m·∫°ng +2%
                        if (this.playerSummonShenron.nPoint.critg < 9) {
                            this.playerSummonShenron.nPoint.critg += 2;
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "ƒêi·ªÅu ∆∞·ªõc n√†y ƒë√£ qu√° s·ª©c v·ªõi ta, ta s·∫Ω cho ng∆∞∆°i ch·ªçn l·∫°i");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 3: //thay chi√™u 2-3 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(1).skillId != -1) {
                                playerSummonShenron.pet.openSkill2();
                                if (playerSummonShenron.pet.playerSkill.skills.get(2).skillId != -1) {
                                    playerSummonShenron.pet.openSkill3();
                                }
                            } else {
                                Service.getInstance().sendThongBao(playerSummonShenron, "√çt nh·∫•t ƒë·ªá t·ª≠ ng∆∞∆°i ph·∫£i c√≥ chi√™u 2 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 4: //thay chi√™u 3-4 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(2).skillId != -1) {
                                playerSummonShenron.pet.openSkill3();
                                if (playerSummonShenron.pet.playerSkill.skills.get(3).skillId != -1) {
                                    playerSummonShenron.pet.openSkill4();
                                }
                            } else {
                                Service.getInstance().sendThongBao(playerSummonShenron, "√çt nh·∫•t ƒë·ªá t·ª≠ ng∆∞∆°i ph·∫£i c√≥ chi√™u 3 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 5: //thay chi√™u 3-4 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(0).skillId != -1) {
                                playerSummonShenron.pet.openSkill1();
                            } else {
                                Service.getInstance().sendThongBao(playerSummonShenron, "√çt nh·∫•t ƒë·ªá t·ª≠ ng∆∞∆°i ph·∫£i c√≥ chi√™u 3 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                }
                break;
            case ConstNpc.SHENRON_1_2:
                switch (this.select) {
                    case 0: //ƒë·∫πp trai nh·∫•t v≈© tr·ª•
                        if (InventoryServiceNew.gI().getCountEmptyBag(playerSummonShenron) > 0) {
                            byte gender = this.playerSummonShenron.gender;
                            Item avtVip = ItemService.gI().createNewItem((short) (gender == ConstPlayer.TRAI_DAT ? 227
                                    : gender == ConstPlayer.NAMEC ? 228 : 229));
                            avtVip.itemOptions.add(new ItemOption(50, Util.nextInt(5, 200)));
                            avtVip.itemOptions.add(new Item.ItemOption(77, Util.nextInt(5, 200)));
                            avtVip.itemOptions.add(new Item.ItemOption(101, 1000));
                            avtVip.itemOptions.add(new ItemOption(97, Util.nextInt(5, 200)));
                            avtVip.itemOptions.add(new ItemOption(77, Util.nextInt(10, 200)));
                            InventoryServiceNew.gI().addItemBag(playerSummonShenron, avtVip);
                            InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "H√†nh trang ƒë√£ ƒë·∫ßy");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 1: //+1,5 ng·ªçc
                        this.playerSummonShenron.inventory.ruby += 100;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 2:
                        long limitDame = playerSummonShenron.nPoint.getDameLimit();
                        if (limitDame < playerSummonShenron.nPoint.getMaxDameLimit()) {
                            Service.gI().sendThongBao(playerSummonShenron, "B·∫°n h√£y m·ªü v√† c·ªông max c√°c ch·ªâ s·ªë g·ªëc tr∆∞·ªõc khi l√†m ƒëi·ªÅu n√†y\n v√¨ n√≥ s·∫Ω tƒÉng gi·ªõi h·∫°n g·ªëc c·ªßa b·∫°n l√™n m·ªô t·∫ßm cao m·ªõi\n n·∫øu ch∆∞a th√¨ r·∫•t l√† l√£ng ph√≠");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        } else if (limitDame >= playerSummonShenron.nPoint.getMaxDameLimit()) {
                            playerSummonShenron.nPoint.dameg += 500;
                            playerSummonShenron.nPoint.hpg += 500;
                            playerSummonShenron.nPoint.mpg += 500;
                        }
                        break;
                    case 3: //gƒÉng tay ƒë·ªá l√™n 1 c·∫•p
                        if (this.playerSummonShenron.pet != null) {
                            Item item = this.playerSummonShenron.pet.inventory.itemsBody.get(2);
                            if (item.isNotNullItem()) {
                                int level = 0;
                                for (ItemOption io : item.itemOptions) {
                                    if (io.optionTemplate.id == 72) {
                                        level = io.param;
                                        if (level < 7) {
                                            io.param++;
                                        }
                                        break;
                                    }
                                }
                                if (level < 7) {
                                    if (level == 0) {
                                        item.itemOptions.add(new ItemOption(72, 1));
                                    }
                                    for (ItemOption io : item.itemOptions) {
                                        if (io.optionTemplate.id == 0) {
                                            io.param += (io.param * 10 / 100);
                                            break;
                                        }
                                    }
                                    Service.getInstance().point(playerSummonShenron);
                                } else {
                                    Service.getInstance().sendThongBao(playerSummonShenron, "GƒÉng tay c·ªßa ƒë·ªá ng∆∞∆°i ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa");
                                    reOpenShenronWishes(playerSummonShenron);
                                    return;
                                }
                            } else {
                                Service.getInstance().sendThongBao(playerSummonShenron, "ƒê·ªá ng∆∞∆°i hi·ªán t·∫°i c√≥ ƒëeo gƒÉng ƒë√¢u");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "Ng∆∞∆°i ƒë√¢u c√≥ ƒë·ªá t·ª≠");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 4: //thay chi√™u 4-5 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(3).skillId != -1) {
                                playerSummonShenron.pet.openSkill4();
                                if (playerSummonShenron.pet.playerSkill.skills.get(4).skillId != -1) {
                                    playerSummonShenron.pet.openSkill5();
                                }
                            } else {
                                Service.getInstance().sendThongBao(playerSummonShenron, "√çt nh·∫•t ƒë·ªá t·ª≠ ng∆∞∆°i ph·∫£i c√≥ chi√™u 3 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.getInstance().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                }
                break;
            case ConstNpc.SHENRON_2:
                switch (this.select) {
                    case 0: //+150 ng·ªçc
                        this.playerSummonShenron.inventory.ruby += 10;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 1: //+20 tr smtn
                        Service.getInstance().addSMTN(this.playerSummonShenron, (byte) 2, 20000000, false);
                        break;
                    case 2: //2 tr v√†ng
                        if (this.playerSummonShenron.inventory.gold > 1800000000) {
                            this.playerSummonShenron.inventory.gold = Inventory.LIMIT_GOLD;
                        } else {
                            this.playerSummonShenron.inventory.gold += 200000000;
                        }
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                }
                break;
            case ConstNpc.SHENRON_3:
                switch (this.select) {
                    case 0: //+15 ng·ªçc
                        this.playerSummonShenron.inventory.ruby += 1;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 1: //+2 tr smtn
                        Service.getInstance().addSMTN(this.playerSummonShenron, (byte) 2, 2000000, false);
                        break;
                    case 2: //200k v√†ng
                        if (this.playerSummonShenron.inventory.gold > (2000000000 - 20000000)) {
                            this.playerSummonShenron.inventory.gold = Inventory.LIMIT_GOLD;
                        } else {
                            this.playerSummonShenron.inventory.gold += 20000000;
                        }
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                }
                break;
            case ConstNpc.SHENRONTRB:
                switch (this.select) {
                    case 0:// Thay skill 2,3,4 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(1).skillId != -1) {
                                playerSummonShenron.pet.openSkill2();
                                if (playerSummonShenron.pet.playerSkill.skills.get(2).skillId != -1) {
                                    playerSummonShenron.pet.openSkill3();
                                }
                                if (playerSummonShenron.pet.playerSkill.skills.get(3).skillId != -1) {
                                    playerSummonShenron.pet.openSkill4();
                                }
                            } else {
                                Service.gI().sendThongBao(playerSummonShenron, "ƒê·ªá t·ª≠ c·ªßa ng∆∞·ªùi ph·∫£i c√≥ chi√™u 2, 3 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 1: //Ch√¢n thi√™n t·ª≠ ƒë·∫∑c bi·ªát
                        Item chanthientu = ItemService.gI().createNewItem((short) 1328);
                        chanthientu.itemOptions.add(new Item.ItemOption(50, 3));
                        chanthientu.itemOptions.add(new Item.ItemOption(77, 3));
                        chanthientu.itemOptions.add(new Item.ItemOption(103, 3));
                        chanthientu.itemOptions.add(new Item.ItemOption(30, 0));
                        chanthientu.itemOptions.add(new Item.ItemOption(73, 0));
                        if (Util.isTrue(98, 100)) {
                            chanthientu.itemOptions.add(new Item.ItemOption(93, Util.nextInt(1, 3)));
                        }
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, chanthientu);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c Ch√¢n thi√™n t·ª≠ ƒë·∫∑c bi·ªát");
                        break;
                    case 2: //goldenexp
                        Item goldenexp = ItemService.gI().createNewItem((short) 1720);
                        goldenexp.itemOptions.add(new Item.ItemOption(50, 22));
                        goldenexp.itemOptions.add(new Item.ItemOption(77, 22));
                        goldenexp.itemOptions.add(new Item.ItemOption(103, 22));
                        goldenexp.itemOptions.add(new Item.ItemOption(73, 0));
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, goldenexp);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c Golden exp");
                        break;
                    case 3: //h·ªôp qu√† bay
                        Item hopquabay = ItemService.gI().createNewItem((short) 1358);
                        hopquabay.itemOptions.add(new Item.ItemOption(73, 0));
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, hopquabay);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c H·ªôp qu√† bay");
                        break;
                }
                break;
            case ConstNpc.SHENRONTRB1:
                switch (this.select) {
                    case 0:// Thay skill 2,3,4 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(1).skillId != -1) {
                                playerSummonShenron.pet.openSkill2();
                                if (playerSummonShenron.pet.playerSkill.skills.get(2).skillId != -1) {
                                    playerSummonShenron.pet.openSkill3();
                                }
                                if (playerSummonShenron.pet.playerSkill.skills.get(3).skillId != -1) {
                                    playerSummonShenron.pet.openSkill4();
                                }
                            } else {
                                Service.gI().sendThongBao(playerSummonShenron, "ƒê·ªá t·ª≠ c·ªßa ng∆∞·ªùi ph·∫£i c√≥ chi√™u 2, 3 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 1: //Ch√¢n thi√™n t·ª≠ ƒë·∫∑c bi·ªát
                        Item chanthientu = ItemService.gI().createNewItem((short) 1328);
                        chanthientu.itemOptions.add(new Item.ItemOption(50, 3));
                        chanthientu.itemOptions.add(new Item.ItemOption(77, 3));
                        chanthientu.itemOptions.add(new Item.ItemOption(103, 3));
                        chanthientu.itemOptions.add(new Item.ItemOption(30, 0));
                        chanthientu.itemOptions.add(new Item.ItemOption(73, 0));
                        if (Util.isTrue(98, 100)) {
                            chanthientu.itemOptions.add(new Item.ItemOption(93, Util.nextInt(1, 3)));
                        }
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, chanthientu);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c Ch√¢n thi√™n t·ª≠ ƒë·∫∑c bi·ªát");
                        break;
                    case 2: //goldenexp
                        Item goldenexp = ItemService.gI().createNewItem((short) 1720);
                        goldenexp.itemOptions.add(new Item.ItemOption(50, 22));
                        goldenexp.itemOptions.add(new Item.ItemOption(77, 22));
                        goldenexp.itemOptions.add(new Item.ItemOption(103, 22));
                        goldenexp.itemOptions.add(new Item.ItemOption(73, 0));
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, goldenexp);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c Golden exp");
                        break;
                    case 3: //h·ªôp qu√† bay
                        Item hopquabay = ItemService.gI().createNewItem((short) 1358);
                        hopquabay.itemOptions.add(new Item.ItemOption(73, 0));
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, hopquabay);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c H·ªôp qu√† bay");
                        break;
                }
                break;
            case ConstNpc.NAMEC_1:
                if (select == 0) {
                    if (playerSummonShenron.clan != null) {
                        playerSummonShenron.clan.members.forEach(m -> {
                            if (Client.gI().getPlayer(m.id) != null) {
                                Player p = Client.gI().getPlayer(m.id);
                                Item it = ItemService.gI().createNewItem((short) 16);
                                it.quantity = 20;
                                InventoryServiceNew.gI().addItemBag(p, it);
                                InventoryServiceNew.gI().sendItemBags(p);
                            } else {
                                Player p = GodGK.loadById(m.id);
                                if (p != null) {
                                    Item it = ItemService.gI().createNewItem((short) 16);
                                    it.quantity = 20;
                                    InventoryServiceNew.gI().addItemBag(p, it);
                                    PlayerDAO.updatePlayer(p);
                                }
                            }
                        });
                    } else {
                        Item it = ItemService.gI().createNewItem((short) 16);
                        it.quantity = 20;
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, it);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                    }
                }
                break;
        }
        shenronLeave(this.playerSummonShenron, WISHED);
    }

    public void showConfirmShenron(Player pl, int menu, byte select) {
        this.menuShenron = menu;
        this.select = select;
        String wish = null;
        switch (menu) {
            case ConstNpc.SHENRON_1_1:
                wish = SHENRON_1_STAR_WISHES_1[select];
                break;
            case ConstNpc.SHENRON_1_2:
                wish = SHENRON_1_STAR_WISHES_2[select];
                break;
            case ConstNpc.SHENRON_2:
                wish = SHENRON_2_STARS_WHISHES[select];
                break;
            case ConstNpc.SHENRON_3:
                wish = SHENRON_3_STARS_WHISHES[select];
                break;
            case ConstNpc.NAMEC_1:
                wish = "x20 ng·ªçc r·ªìng 3 sao";
                break;
            case ConstNpc.SHENRONTRB:
                wish = SHENRON_1_STAR_TRB[select];
                break;
            case ConstNpc.SHENRONTRB1:
                wish = SHENRON_1_STAR_TRB1[select];
                break;
        }
        NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_CONFIRM, "Ng∆∞∆°i c√≥ ch·∫Øc mu·ªën ∆∞·ªõc?", wish, "T·ª´ ch·ªëi");
    }

    public void reOpenShenronWishes(Player pl) {
        switch (menuShenron) {
            case ConstNpc.SHENRON_1_1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_1_1, SHENRON_SAY, SHENRON_1_STAR_WISHES_1);
                break;
            case ConstNpc.SHENRON_1_2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_1_2, SHENRON_SAY, SHENRON_1_STAR_WISHES_2);
                break;
            case ConstNpc.SHENRON_2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_2, SHENRON_SAY, SHENRON_2_STARS_WHISHES);
                break;
            case ConstNpc.SHENRON_3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_3, SHENRON_SAY, SHENRON_3_STARS_WHISHES);
                break;
        }
    }

    public void shenronLeave(Player pl, byte type) {
        if (type == WISHED) {
            NpcService.gI().createTutorial(pl, -1, "ƒêi·ªÅu ∆∞·ªõc c·ªßa ng∆∞∆°i ƒë√£ tr·ªü th√†nh s·ª± th·∫≠t\nH·∫πn g·∫∑p ng∆∞∆°i l·∫ßn sau, ta ƒëi ng·ªß ƒë√¢y, b√°i bai");
        } else {
            NpcService.gI().createMenuRongThieng(pl, ConstNpc.IGNORE_MENU, "Ta bu·ªìn ng·ªß qu√° r·ªìi\nH·∫πn g·∫∑p ng∆∞∆°i l·∫ßn sau, ta ƒëi ƒë√¢y, b√°i bai");
        }
        activeShenron(pl, false, SummonDragon.DRAGON_SHENRON);
        this.isShenronAppear = false;
        this.menuShenron = -1;
        this.select = -1;
        this.playerSummonShenron = null;
        this.playerSummonShenronId = -1;
        this.shenronStar = -1;
        this.mapShenronAppear = null;
        lastTimeShenronAppeared = System.currentTimeMillis();
    }

    //--------------------------------------------------------------------------
}
